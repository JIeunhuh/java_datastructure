package chap3_검색알고리즘;


import java.util.Arrays;
import java.util.Comparator;

//3장 객체 배열 정렬 - binary search
/*
* Comparator를 사용하는 방법
* MyComparator implements Comparator<>
* MyComparator myComparator = new MyComparator();
* Arrays.sort(array, myComparator);
* Collections.sort(list, myComparator);
*/

//static 여러개 만들어져도 하나의 값 
class Fruit {

   String name;
   int price;
   String expire;

   public static final Comparator<Fruit> class_cc = new ComparatorFruit();

   private static class ComparatorFruit implements Comparator<Fruit> {// 익명클래스 사용
      public int compare(Fruit f1, Fruit f2) {
         return (f1.expire.compareTo(f2.expire));
      }
   };

   public Fruit(String name, int price, String expire) {
      this.name = name;
      this.price = price;
      this.expire = expire;
   }

   public String getName() {
      return name;
   }

   public void setName(String name) {
      this.name = name;
   }

   public int getPrice() {
      return price;
   }

   public void setPrice(int price) {
      this.price = price;
   }

   public String getExpire() {
      return expire;
   }

   public void setExpire(String expire) {
      this.expire = expire;
   }

   public static Comparator<Fruit> getClassCc() {
      return class_cc;
   }

   public String toString() {
      return name + "" + price + "" + expire;
   }

   static void sortData(Fruit[] arr, Comparator<? super Fruit> c) {
      for (int i = 0; i < arr.length; i++) {
         for (int j = i + 1; j < arr.length; j++) {
            if (c.compare(arr[i], arr[j]) > 0) {
               swap(arr, i, j);
            }
         }
      }
   }

   static void swap(Fruit[] arr, int i, int j) {
      Fruit temp = arr[i];
      arr[i] = arr[j];
      arr[j] = temp;
   }

   static void showData(Fruit[] arr) {
      // 난수 생성하여 배열에 입력
      for (int i = 0; i < arr.length; i++) {
         System.out.println(arr[i] + " ");
      }
   }

   static int binarySearch(Fruit[] arr, Fruit newFruit, Comparator<? super Fruit> cc) {
      // 이진탐색 코드 가져와서 Fruit 버전으로 변경

      int pl = 0;
      int pr = arr.length - 1;

      do {
         int pc = (pl + pr) / 2;
         if (cc.compare(arr[pc], newFruit) == 0)
            return pc;
         else if (cc.compare(arr[pc], newFruit) < 0)
            pl = pc + 1;
         else
            pr = pc - 1;
      } while (pl <= pr);
      return -1;
   }

   /*
    * // if 문에서 비교할 떄 Fruit d1 = arr[0]; Fruit d2 = arr[1];
    * 
    * if(cc.compare(d1,d2)>0) {
    * 
    * }
    */

   public class fruit객체배열 {
      
  
      public static void main(String[] args) { 
         Fruit[] arr = { new Fruit("사과", 200, "2023-5-8"), new Fruit("키위", 500, "2023-6-8"),
               new Fruit("오렌지", 200, "2023-7-8"), new Fruit("바나나", 50, "2023-5-18"),
               new Fruit("수박", 880, "2023-5-28"), new Fruit("체리", 10, "2023-9-8") };
         System.out.println("정렬전 객체 배열: ");

         showData(arr);

         Arrays.sort(arr, (a, b) -> a.getPrice() - b.getPrice()); // Fruit에 compareTo()가 있어도 람다식 우선 적용
         // 컴패얼연산자에 들어갔다.
         System.out.println("람다식 정렬(가격)후 객체 배열: ");

         showData(arr);

         Arrays.sort(arr, new Comparator<Fruit>() {
            @Override
            public int compare(Fruit a1, Fruit a2) {
               return a1.getName().compareTo(a2.getName());
            }
         });
         System.out.println("comparator 정렬(이름)후 객체 배열: ");
         showData(arr);

         Comparator<Fruit> cc_name = new Comparator<Fruit>() {// 익명클래스 사용
            public int compare(Fruit f1, Fruit f2) {
               return (f1.name.compareTo(f2.name));
            }
         };
         Comparator<Fruit> cc_price = new Comparator<Fruit>() {// 익명클래스 사용
            public int compare(Fruit f1, Fruit f2) {
               return (f1.price - f2.price);
            }
         };

         Fruit newFruit = new Fruit("체리", 500, "2023-5-18");
         int result3 = Arrays.binarySearch(arr, newFruit, Fruit.class_cc);
         System.out.println("\nArrays.binarySearch() 조회결과::" + result3);

         result3 = binarySearch(arr, newFruit, cc_name);
         System.out.println("\nbinarySearch() 조회결과::" + result3);

         sortData(arr, cc_price);
         System.out.println("comparator 정렬(가격)후 객체 배열: ");

         showData(arr);
         result3 = Arrays.binarySearch(arr, newFruit, Fruit.class_cc);
         System.out.println("\nArrays.binarySearch() 조회결과::" + result3);

         result3 = binarySearch(arr, newFruit, Fruit.class_cc);
         System.out.println("\nbinarySearch() 조회결과::" + result3);
      }

   }
}
package chap4_스택과큐;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.Scanner;

class objectStack {
	private List<Point> data; // 스택용 배열
	private int capacity; // 스택의 크기
	private int top; // 스택 포인터

	public class EmptyIntStackException extends RuntimeException {
		public EmptyIntStackException() {
		}
	}

	public class OverflowIntStackException extends RuntimeException {
		public OverflowIntStackException() {
		}
	}

	public objectStack(int maxlen) {
		top = 0;
		capacity = maxlen;
		try {
			data = new ArrayList<Point>();
		} catch (OutOfMemoryError e) {
			capacity = 0;
		}
	}

	// stack에 x를 푸시
	public int push(Point x) throws OverflowIntStackException {
		if (top >= capacity)
			throw new OverflowIntStackException();
		{
			data.add(x);
			return 1;
		}
	}

	// 스택에서 데이터를 팝
	public Point pop() throws EmptyIntStackException {
		if (top <= 0)
			throw new EmptyIntStackException();

		// Point p =data.get(top-1);
		Point p = data.remove(top - 1);
		return p;

		// return data[--top];

	}

	// 스택에서 데이터를 피크(꼭대기에 있는 데이터를 들여다 봄)
	public Point peek() throws EmptyIntStackException {
		if (data.equals(0))
			throw new EmptyIntStackException();
		return data.get(top - 1);
		// return .data[top - 1];
	}

	// 스택을 비움
	public void clear() {
		top = 0;
	}

	// 스택에서 x를 찾아 인덱스(없으면 -1)을 반환
	public int indexOf(Point x) {
		for (int i = top - 1; i >= 0; i--)
			if (data.get(i).equals(x))
				return i;
		return -1;
	}

	public boolean isEmpty() {
		return top <= 0;
	}

	public void dump() {
		if (isEmpty())
			// if(ptr <= 0)
			System.out.println("stack이 비었다.");
		else {
			for (int i = 0; i < ptr; i++)
				System.out.println(data[i] + " ");
			System.out.println();
		}
	}
}


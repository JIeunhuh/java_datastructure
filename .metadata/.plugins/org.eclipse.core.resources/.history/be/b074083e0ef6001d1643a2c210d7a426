package chap5_재귀알고리즘;

import java.util.ArrayList;

class Stack3 {
	private ArrayList<Point> stack = new ArrayList<>(); // 스택용 arraylist
	private int capacity; // stack 용량
	private int ptr; // 스택 포인터

	public class EmptyIntStackException extends RuntimeException {
		/**
		 * 
		 */
		private static final long serialVersionUID = 1L;

		public EmptyIntStackException() {
		}
	}

	public class OverFlowIntStackException extends RuntimeException {
		/**
		 * 
		 */
		private static final long serialVersionUID = 1L;

		public OverFlowIntStackException() {
		}
	}

	public Stack3(int maxlen) {
		ptr = 0;
		capacity = maxlen;
		try {
			stack = new ArrayList<Point>();
		} catch (OutOfMemoryError e) {
			capacity = 0;
		}
	}

	public int push(Point x) throws OverFlowIntStackException {
		if (ptr >= capacity) {
			throw new OverFlowIntStackException();
		}
		stack.add(x);
		ptr++;
		return 1;
	}

	public Point pop() throws EmptyIntStackException {
		if (ptr <= 0)
			throw new EmptyIntStackException();
		Point x = stack.remove(ptr - 1);
		ptr--;
		return x;
	}

}

class Point {
	private int ix;
	private int iy;

	public Point(int ix, int iy) {
		this.ix = ix;
		this.iy = iy;
	}

	@Override
	public String toString() {
		return "Point [ix=" + ix + ", iy=" + iy + "]";
	}

}

public class eightQueen {
	public static void SolveQueen(int[][] d) {
		int count = 0, mode = 0;
		int ix = 0, iy = 0;
		Stack3 st = new Stack3(10);
		Point p = new Point(ix, iy);
		d[ix][iy] = 1;
		count++;
		st.push(p);
		while (count < 8) {
			ix++;
			int cy = 0;
			while (ix < d.length) {
				cy=NextMove(d, ix, cy);
				while (cy < d[0].length) {
					Point px = new Point(ix,iy);
					st.push(p);
					count++;
					break;

				}
				if (cy != d[0].length) {
					break;
				} else {
					p = st.pop();
					count--;

				}

			}

		}
	}

	public static boolean checkRow(int[][] d, int crow) {
		// 배열 d에서 crow 행에 queen을 놓을 수 있는지
		for (int i = 0; i < d.length; i++) {
			if (d[crow][i] == 1)
				return false;
		}
		return true;
	}

	public static boolean checkCol(int[][] d, int ccol) {
		// 배열 d에서 ccol열에 queen을 놓을 수 있는지
		for (int i = 0; i < d[0].length; i++) {
			if (d[i][ccol] == 1)
				return false;
		}
		return true;
	}

	public static boolean checkDiagSW(int[][] d, int x, int y) { // x++, y-- or x--, y++ where 0<= x,y <= 7
		// d[cx][cy]의 sw쪽 대각선에 배치 가능한지
		int cx = x;
		int cy = y;
		while (cx >= 0 && cx < d.length && cy >= 0 && cy < d.length) {
			cx++;
			cy--;
			if (d[cx][cy] == 1)
				return false;
		}
		cx = x;
		cy = y;
		while (cx >= 0 && cx < d.length && cy >= 0 && cy < d.length) {
			cx++;
			cy--;
			if (d[cx][cy] == 1)
				return false;
		}
		return true;
	}

	public static boolean checkDiagSE(int[][] d, int cx, int cy) {// x++, y++ or x--, y--
		// d[cx][cy]의 se쪽 대각선에 배치 가능한지
		return true;
	}

	public static boolean CheckMove(int[][] d, int x, int y) {// (x,y)로 이동 가능한지를 check
		if (checkRow(d, x) && checkCol(d, y) && checkDiagSE(d, x, y) && checkDiagSW(d, x, y))
			return true;
		return false;
	}

	public static int NextMove(int[][] d, int row, int col) {// 다음 row에 대하여 이동할 col을 조사
		for(; col<d.length; col++) {
			if(CheckMove(d, row, col))
				return col;
		}
		return -1;
	}

	public static void main(String[] args) {
		int row = 8, col = 8;
		int[][] data = new int[8][8];
		for (int i = 0; i < data.length; i++)
			for (int j = 0; j < data[0].length; j++)
				data[i][j] = 0;

		SolveQueen(data);

		for (int i = 0; i < data.length; i++) {
			for (int j = 0; j < data[0].length; j++) {
				System.out.print(" " + data[i][j]);
			}
			System.out.println();
		}
	}
}
